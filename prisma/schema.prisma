// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id     String @id @default(cuid())
  userId String // clerk user id

  name        String
  description String?

  address String
  email   String
  phone   String

  website String?
  logoUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?

  userId String // clerk user id

  inventoryItems Inventory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

enum InventoryStatus {
  IN_STOCK
  LOW_IN_STOCK
  OUT_OF_STOCK
}

model ProductCategory {
  id          String  @id @default(cuid())
  name        String
  description String?

  userId String // clerk user id

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@index([userId])
}

model Product {
  id     String @id @default(cuid())
  userId String // clerk user id

  categoryId String
  category   ProductCategory @relation(references: [id], fields: [categoryId])

  name        String
  description String?
  sku         String? // SKU for products without variants
  basePrice   Float
  isActive    Boolean @default(true)
  hasVariants Boolean @default(false)

  // New variant system
  variantOptions ProductVariantOption[]
  variants       ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@unique([userId, name, sku])
  @@index([userId])
  @@index([categoryId])
  @@index([isActive])
}

model ProductVariantOption {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(references: [id], fields: [productId], onDelete: Cascade)

  name     String // e.g., "Size", "Temperature"
  position Int    @default(0)

  values ProductVariantOptionValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, name])
  @@index([productId])
}

model ProductVariantOptionValue {
  id       String               @id @default(cuid())
  optionId String
  option   ProductVariantOption @relation(references: [id], fields: [optionId], onDelete: Cascade)

  value    String // e.g., "8oz", "12oz", "Hot", "Cold"
  position Int    @default(0)

  variantValues ProductVariantValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([optionId, value])
  @@index([optionId])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(references: [id], fields: [productId], onDelete: Cascade)

  title       String // e.g., "8oz / Hot", "12oz / Cold"
  sku         String
  price       Float?
  isDefault   Boolean @default(false)
  isAvailable Boolean @default(true)

  // Combination of option values
  optionValues ProductVariantValue[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, title])
  @@unique([sku])
  @@index([productId])
  @@index([sku])
}

model ProductVariantValue {
  id            String                    @id @default(cuid())
  variantId     String
  variant       ProductVariant            @relation(references: [id], fields: [variantId], onDelete: Cascade)
  optionValueId String
  optionValue   ProductVariantOptionValue @relation(references: [id], fields: [optionValueId], onDelete: Cascade)

  @@unique([variantId, optionValueId])
  @@index([variantId])
  @@index([optionValueId])
}

model Inventory {
  id     String @id @default(cuid())
  userId String // clerk user id

  categoryId String
  category   Category @relation(references: [id], fields: [categoryId])

  name         String
  sku          String
  description  String?
  unit         String
  quantity     Int
  reorderLevel Int?            @default(0)
  costPrice    Float
  supplier     String?
  status       InventoryStatus @default(IN_STOCK)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name])
  @@unique([userId, sku])
  @@unique([name, sku])
  @@index([userId])
  @@index([status])
  @@index([categoryId])
}
