
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Inventory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Inventory
 * 
 */
export type InventoryModel = runtime.Types.Result.DefaultSelection<Prisma.$InventoryPayload>

export type AggregateInventory = {
  _count: InventoryCountAggregateOutputType | null
  _avg: InventoryAvgAggregateOutputType | null
  _sum: InventorySumAggregateOutputType | null
  _min: InventoryMinAggregateOutputType | null
  _max: InventoryMaxAggregateOutputType | null
}

export type InventoryAvgAggregateOutputType = {
  quantity: number | null
  reorderLevel: number | null
  costPrice: number | null
}

export type InventorySumAggregateOutputType = {
  quantity: number | null
  reorderLevel: number | null
  costPrice: number | null
}

export type InventoryMinAggregateOutputType = {
  id: string | null
  userId: string | null
  categoryId: string | null
  name: string | null
  sku: string | null
  description: string | null
  unit: string | null
  quantity: number | null
  reorderLevel: number | null
  costPrice: number | null
  supplier: string | null
  status: $Enums.InventoryStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InventoryMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  categoryId: string | null
  name: string | null
  sku: string | null
  description: string | null
  unit: string | null
  quantity: number | null
  reorderLevel: number | null
  costPrice: number | null
  supplier: string | null
  status: $Enums.InventoryStatus | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InventoryCountAggregateOutputType = {
  id: number
  userId: number
  categoryId: number
  name: number
  sku: number
  description: number
  unit: number
  quantity: number
  reorderLevel: number
  costPrice: number
  supplier: number
  status: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InventoryAvgAggregateInputType = {
  quantity?: true
  reorderLevel?: true
  costPrice?: true
}

export type InventorySumAggregateInputType = {
  quantity?: true
  reorderLevel?: true
  costPrice?: true
}

export type InventoryMinAggregateInputType = {
  id?: true
  userId?: true
  categoryId?: true
  name?: true
  sku?: true
  description?: true
  unit?: true
  quantity?: true
  reorderLevel?: true
  costPrice?: true
  supplier?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type InventoryMaxAggregateInputType = {
  id?: true
  userId?: true
  categoryId?: true
  name?: true
  sku?: true
  description?: true
  unit?: true
  quantity?: true
  reorderLevel?: true
  costPrice?: true
  supplier?: true
  status?: true
  createdAt?: true
  updatedAt?: true
}

export type InventoryCountAggregateInputType = {
  id?: true
  userId?: true
  categoryId?: true
  name?: true
  sku?: true
  description?: true
  unit?: true
  quantity?: true
  reorderLevel?: true
  costPrice?: true
  supplier?: true
  status?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InventoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Inventory to aggregate.
   */
  where?: Prisma.InventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Inventories to fetch.
   */
  orderBy?: Prisma.InventoryOrderByWithRelationInput | Prisma.InventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Inventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Inventories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Inventories
  **/
  _count?: true | InventoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: InventoryAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: InventorySumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InventoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InventoryMaxAggregateInputType
}

export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
      [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInventory[P]>
    : Prisma.GetScalarType<T[P], AggregateInventory[P]>
}




export type InventoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InventoryWhereInput
  orderBy?: Prisma.InventoryOrderByWithAggregationInput | Prisma.InventoryOrderByWithAggregationInput[]
  by: Prisma.InventoryScalarFieldEnum[] | Prisma.InventoryScalarFieldEnum
  having?: Prisma.InventoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InventoryCountAggregateInputType | true
  _avg?: InventoryAvgAggregateInputType
  _sum?: InventorySumAggregateInputType
  _min?: InventoryMinAggregateInputType
  _max?: InventoryMaxAggregateInputType
}

export type InventoryGroupByOutputType = {
  id: string
  userId: string
  categoryId: string
  name: string
  sku: string
  description: string | null
  unit: string
  quantity: number
  reorderLevel: number | null
  costPrice: number
  supplier: string | null
  status: $Enums.InventoryStatus
  createdAt: Date
  updatedAt: Date
  _count: InventoryCountAggregateOutputType | null
  _avg: InventoryAvgAggregateOutputType | null
  _sum: InventorySumAggregateOutputType | null
  _min: InventoryMinAggregateOutputType | null
  _max: InventoryMaxAggregateOutputType | null
}

type GetInventoryGroupByPayload<T extends InventoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InventoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InventoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InventoryGroupByOutputType[P]>
      }
    >
  >



export type InventoryWhereInput = {
  AND?: Prisma.InventoryWhereInput | Prisma.InventoryWhereInput[]
  OR?: Prisma.InventoryWhereInput[]
  NOT?: Prisma.InventoryWhereInput | Prisma.InventoryWhereInput[]
  id?: Prisma.StringFilter<"Inventory"> | string
  userId?: Prisma.StringFilter<"Inventory"> | string
  categoryId?: Prisma.StringFilter<"Inventory"> | string
  name?: Prisma.StringFilter<"Inventory"> | string
  sku?: Prisma.StringFilter<"Inventory"> | string
  description?: Prisma.StringNullableFilter<"Inventory"> | string | null
  unit?: Prisma.StringFilter<"Inventory"> | string
  quantity?: Prisma.IntFilter<"Inventory"> | number
  reorderLevel?: Prisma.IntNullableFilter<"Inventory"> | number | null
  costPrice?: Prisma.FloatFilter<"Inventory"> | number
  supplier?: Prisma.StringNullableFilter<"Inventory"> | string | null
  status?: Prisma.EnumInventoryStatusFilter<"Inventory"> | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFilter<"Inventory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Inventory"> | Date | string
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
}

export type InventoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  unit?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrderInput | Prisma.SortOrder
  costPrice?: Prisma.SortOrder
  supplier?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  category?: Prisma.CategoryOrderByWithRelationInput
}

export type InventoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_name?: Prisma.InventoryUserIdNameCompoundUniqueInput
  userId_sku?: Prisma.InventoryUserIdSkuCompoundUniqueInput
  name_sku?: Prisma.InventoryNameSkuCompoundUniqueInput
  AND?: Prisma.InventoryWhereInput | Prisma.InventoryWhereInput[]
  OR?: Prisma.InventoryWhereInput[]
  NOT?: Prisma.InventoryWhereInput | Prisma.InventoryWhereInput[]
  userId?: Prisma.StringFilter<"Inventory"> | string
  categoryId?: Prisma.StringFilter<"Inventory"> | string
  name?: Prisma.StringFilter<"Inventory"> | string
  sku?: Prisma.StringFilter<"Inventory"> | string
  description?: Prisma.StringNullableFilter<"Inventory"> | string | null
  unit?: Prisma.StringFilter<"Inventory"> | string
  quantity?: Prisma.IntFilter<"Inventory"> | number
  reorderLevel?: Prisma.IntNullableFilter<"Inventory"> | number | null
  costPrice?: Prisma.FloatFilter<"Inventory"> | number
  supplier?: Prisma.StringNullableFilter<"Inventory"> | string | null
  status?: Prisma.EnumInventoryStatusFilter<"Inventory"> | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFilter<"Inventory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Inventory"> | Date | string
  category?: Prisma.XOR<Prisma.CategoryScalarRelationFilter, Prisma.CategoryWhereInput>
}, "id" | "userId_name" | "userId_sku" | "name_sku">

export type InventoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  unit?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrderInput | Prisma.SortOrder
  costPrice?: Prisma.SortOrder
  supplier?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InventoryCountOrderByAggregateInput
  _avg?: Prisma.InventoryAvgOrderByAggregateInput
  _max?: Prisma.InventoryMaxOrderByAggregateInput
  _min?: Prisma.InventoryMinOrderByAggregateInput
  _sum?: Prisma.InventorySumOrderByAggregateInput
}

export type InventoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.InventoryScalarWhereWithAggregatesInput | Prisma.InventoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.InventoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InventoryScalarWhereWithAggregatesInput | Prisma.InventoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Inventory"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Inventory"> | string
  categoryId?: Prisma.StringWithAggregatesFilter<"Inventory"> | string
  name?: Prisma.StringWithAggregatesFilter<"Inventory"> | string
  sku?: Prisma.StringWithAggregatesFilter<"Inventory"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Inventory"> | string | null
  unit?: Prisma.StringWithAggregatesFilter<"Inventory"> | string
  quantity?: Prisma.IntWithAggregatesFilter<"Inventory"> | number
  reorderLevel?: Prisma.IntNullableWithAggregatesFilter<"Inventory"> | number | null
  costPrice?: Prisma.FloatWithAggregatesFilter<"Inventory"> | number
  supplier?: Prisma.StringNullableWithAggregatesFilter<"Inventory"> | string | null
  status?: Prisma.EnumInventoryStatusWithAggregatesFilter<"Inventory"> | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Inventory"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Inventory"> | Date | string
}

export type InventoryCreateInput = {
  id?: string
  userId: string
  name: string
  sku: string
  description?: string | null
  unit: string
  quantity: number
  reorderLevel?: number | null
  costPrice: number
  supplier?: string | null
  status?: $Enums.InventoryStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  category: Prisma.CategoryCreateNestedOneWithoutInventoryItemsInput
}

export type InventoryUncheckedCreateInput = {
  id?: string
  userId: string
  categoryId: string
  name: string
  sku: string
  description?: string | null
  unit: string
  quantity: number
  reorderLevel?: number | null
  costPrice: number
  supplier?: string | null
  status?: $Enums.InventoryStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  category?: Prisma.CategoryUpdateOneRequiredWithoutInventoryItemsNestedInput
}

export type InventoryUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryCreateManyInput = {
  id?: string
  userId: string
  categoryId: string
  name: string
  sku: string
  description?: string | null
  unit: string
  quantity: number
  reorderLevel?: number | null
  costPrice: number
  supplier?: string | null
  status?: $Enums.InventoryStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  categoryId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryListRelationFilter = {
  every?: Prisma.InventoryWhereInput
  some?: Prisma.InventoryWhereInput
  none?: Prisma.InventoryWhereInput
}

export type InventoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InventoryUserIdNameCompoundUniqueInput = {
  userId: string
  name: string
}

export type InventoryUserIdSkuCompoundUniqueInput = {
  userId: string
  sku: string
}

export type InventoryNameSkuCompoundUniqueInput = {
  name: string
  sku: string
}

export type InventoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  description?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrder
  costPrice?: Prisma.SortOrder
  supplier?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventoryAvgOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrder
  costPrice?: Prisma.SortOrder
}

export type InventoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  description?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrder
  costPrice?: Prisma.SortOrder
  supplier?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  categoryId?: Prisma.SortOrder
  name?: Prisma.SortOrder
  sku?: Prisma.SortOrder
  description?: Prisma.SortOrder
  unit?: Prisma.SortOrder
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrder
  costPrice?: Prisma.SortOrder
  supplier?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InventorySumOrderByAggregateInput = {
  quantity?: Prisma.SortOrder
  reorderLevel?: Prisma.SortOrder
  costPrice?: Prisma.SortOrder
}

export type InventoryCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.InventoryCreateWithoutCategoryInput, Prisma.InventoryUncheckedCreateWithoutCategoryInput> | Prisma.InventoryCreateWithoutCategoryInput[] | Prisma.InventoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.InventoryCreateOrConnectWithoutCategoryInput | Prisma.InventoryCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.InventoryCreateManyCategoryInputEnvelope
  connect?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
}

export type InventoryUncheckedCreateNestedManyWithoutCategoryInput = {
  create?: Prisma.XOR<Prisma.InventoryCreateWithoutCategoryInput, Prisma.InventoryUncheckedCreateWithoutCategoryInput> | Prisma.InventoryCreateWithoutCategoryInput[] | Prisma.InventoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.InventoryCreateOrConnectWithoutCategoryInput | Prisma.InventoryCreateOrConnectWithoutCategoryInput[]
  createMany?: Prisma.InventoryCreateManyCategoryInputEnvelope
  connect?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
}

export type InventoryUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryCreateWithoutCategoryInput, Prisma.InventoryUncheckedCreateWithoutCategoryInput> | Prisma.InventoryCreateWithoutCategoryInput[] | Prisma.InventoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.InventoryCreateOrConnectWithoutCategoryInput | Prisma.InventoryCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.InventoryUpsertWithWhereUniqueWithoutCategoryInput | Prisma.InventoryUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.InventoryCreateManyCategoryInputEnvelope
  set?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  disconnect?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  delete?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  connect?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  update?: Prisma.InventoryUpdateWithWhereUniqueWithoutCategoryInput | Prisma.InventoryUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.InventoryUpdateManyWithWhereWithoutCategoryInput | Prisma.InventoryUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.InventoryScalarWhereInput | Prisma.InventoryScalarWhereInput[]
}

export type InventoryUncheckedUpdateManyWithoutCategoryNestedInput = {
  create?: Prisma.XOR<Prisma.InventoryCreateWithoutCategoryInput, Prisma.InventoryUncheckedCreateWithoutCategoryInput> | Prisma.InventoryCreateWithoutCategoryInput[] | Prisma.InventoryUncheckedCreateWithoutCategoryInput[]
  connectOrCreate?: Prisma.InventoryCreateOrConnectWithoutCategoryInput | Prisma.InventoryCreateOrConnectWithoutCategoryInput[]
  upsert?: Prisma.InventoryUpsertWithWhereUniqueWithoutCategoryInput | Prisma.InventoryUpsertWithWhereUniqueWithoutCategoryInput[]
  createMany?: Prisma.InventoryCreateManyCategoryInputEnvelope
  set?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  disconnect?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  delete?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  connect?: Prisma.InventoryWhereUniqueInput | Prisma.InventoryWhereUniqueInput[]
  update?: Prisma.InventoryUpdateWithWhereUniqueWithoutCategoryInput | Prisma.InventoryUpdateWithWhereUniqueWithoutCategoryInput[]
  updateMany?: Prisma.InventoryUpdateManyWithWhereWithoutCategoryInput | Prisma.InventoryUpdateManyWithWhereWithoutCategoryInput[]
  deleteMany?: Prisma.InventoryScalarWhereInput | Prisma.InventoryScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type FloatFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumInventoryStatusFieldUpdateOperationsInput = {
  set?: $Enums.InventoryStatus
}

export type InventoryCreateWithoutCategoryInput = {
  id?: string
  userId: string
  name: string
  sku: string
  description?: string | null
  unit: string
  quantity: number
  reorderLevel?: number | null
  costPrice: number
  supplier?: string | null
  status?: $Enums.InventoryStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryUncheckedCreateWithoutCategoryInput = {
  id?: string
  userId: string
  name: string
  sku: string
  description?: string | null
  unit: string
  quantity: number
  reorderLevel?: number | null
  costPrice: number
  supplier?: string | null
  status?: $Enums.InventoryStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryCreateOrConnectWithoutCategoryInput = {
  where: Prisma.InventoryWhereUniqueInput
  create: Prisma.XOR<Prisma.InventoryCreateWithoutCategoryInput, Prisma.InventoryUncheckedCreateWithoutCategoryInput>
}

export type InventoryCreateManyCategoryInputEnvelope = {
  data: Prisma.InventoryCreateManyCategoryInput | Prisma.InventoryCreateManyCategoryInput[]
  skipDuplicates?: boolean
}

export type InventoryUpsertWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.InventoryWhereUniqueInput
  update: Prisma.XOR<Prisma.InventoryUpdateWithoutCategoryInput, Prisma.InventoryUncheckedUpdateWithoutCategoryInput>
  create: Prisma.XOR<Prisma.InventoryCreateWithoutCategoryInput, Prisma.InventoryUncheckedCreateWithoutCategoryInput>
}

export type InventoryUpdateWithWhereUniqueWithoutCategoryInput = {
  where: Prisma.InventoryWhereUniqueInput
  data: Prisma.XOR<Prisma.InventoryUpdateWithoutCategoryInput, Prisma.InventoryUncheckedUpdateWithoutCategoryInput>
}

export type InventoryUpdateManyWithWhereWithoutCategoryInput = {
  where: Prisma.InventoryScalarWhereInput
  data: Prisma.XOR<Prisma.InventoryUpdateManyMutationInput, Prisma.InventoryUncheckedUpdateManyWithoutCategoryInput>
}

export type InventoryScalarWhereInput = {
  AND?: Prisma.InventoryScalarWhereInput | Prisma.InventoryScalarWhereInput[]
  OR?: Prisma.InventoryScalarWhereInput[]
  NOT?: Prisma.InventoryScalarWhereInput | Prisma.InventoryScalarWhereInput[]
  id?: Prisma.StringFilter<"Inventory"> | string
  userId?: Prisma.StringFilter<"Inventory"> | string
  categoryId?: Prisma.StringFilter<"Inventory"> | string
  name?: Prisma.StringFilter<"Inventory"> | string
  sku?: Prisma.StringFilter<"Inventory"> | string
  description?: Prisma.StringNullableFilter<"Inventory"> | string | null
  unit?: Prisma.StringFilter<"Inventory"> | string
  quantity?: Prisma.IntFilter<"Inventory"> | number
  reorderLevel?: Prisma.IntNullableFilter<"Inventory"> | number | null
  costPrice?: Prisma.FloatFilter<"Inventory"> | number
  supplier?: Prisma.StringNullableFilter<"Inventory"> | string | null
  status?: Prisma.EnumInventoryStatusFilter<"Inventory"> | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFilter<"Inventory"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Inventory"> | Date | string
}

export type InventoryCreateManyCategoryInput = {
  id?: string
  userId: string
  name: string
  sku: string
  description?: string | null
  unit: string
  quantity: number
  reorderLevel?: number | null
  costPrice: number
  supplier?: string | null
  status?: $Enums.InventoryStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InventoryUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryUncheckedUpdateWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InventoryUncheckedUpdateManyWithoutCategoryInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  sku?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  unit?: Prisma.StringFieldUpdateOperationsInput | string
  quantity?: Prisma.IntFieldUpdateOperationsInput | number
  reorderLevel?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  costPrice?: Prisma.FloatFieldUpdateOperationsInput | number
  supplier?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumInventoryStatusFieldUpdateOperationsInput | $Enums.InventoryStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InventorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  categoryId?: boolean
  name?: boolean
  sku?: boolean
  description?: boolean
  unit?: boolean
  quantity?: boolean
  reorderLevel?: boolean
  costPrice?: boolean
  supplier?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventory"]>

export type InventorySelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  categoryId?: boolean
  name?: boolean
  sku?: boolean
  description?: boolean
  unit?: boolean
  quantity?: boolean
  reorderLevel?: boolean
  costPrice?: boolean
  supplier?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventory"]>

export type InventorySelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  categoryId?: boolean
  name?: boolean
  sku?: boolean
  description?: boolean
  unit?: boolean
  quantity?: boolean
  reorderLevel?: boolean
  costPrice?: boolean
  supplier?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}, ExtArgs["result"]["inventory"]>

export type InventorySelectScalar = {
  id?: boolean
  userId?: boolean
  categoryId?: boolean
  name?: boolean
  sku?: boolean
  description?: boolean
  unit?: boolean
  quantity?: boolean
  reorderLevel?: boolean
  costPrice?: boolean
  supplier?: boolean
  status?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InventoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "categoryId" | "name" | "sku" | "description" | "unit" | "quantity" | "reorderLevel" | "costPrice" | "supplier" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["inventory"]>
export type InventoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}
export type InventoryIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}
export type InventoryIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  category?: boolean | Prisma.CategoryDefaultArgs<ExtArgs>
}

export type $InventoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Inventory"
  objects: {
    category: Prisma.$CategoryPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    categoryId: string
    name: string
    sku: string
    description: string | null
    unit: string
    quantity: number
    reorderLevel: number | null
    costPrice: number
    supplier: string | null
    status: $Enums.InventoryStatus
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["inventory"]>
  composites: {}
}

export type InventoryGetPayload<S extends boolean | null | undefined | InventoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InventoryPayload, S>

export type InventoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InventoryCountAggregateInputType | true
  }

export interface InventoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Inventory'], meta: { name: 'Inventory' } }
  /**
   * Find zero or one Inventory that matches the filter.
   * @param {InventoryFindUniqueArgs} args - Arguments to find a Inventory
   * @example
   * // Get one Inventory
   * const inventory = await prisma.inventory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InventoryFindUniqueArgs>(args: Prisma.SelectSubset<T, InventoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Inventory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
   * @example
   * // Get one Inventory
   * const inventory = await prisma.inventory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InventoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Inventory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryFindFirstArgs} args - Arguments to find a Inventory
   * @example
   * // Get one Inventory
   * const inventory = await prisma.inventory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InventoryFindFirstArgs>(args?: Prisma.SelectSubset<T, InventoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Inventory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
   * @example
   * // Get one Inventory
   * const inventory = await prisma.inventory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InventoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Inventories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Inventories
   * const inventories = await prisma.inventory.findMany()
   * 
   * // Get first 10 Inventories
   * const inventories = await prisma.inventory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const inventoryWithIdOnly = await prisma.inventory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InventoryFindManyArgs>(args?: Prisma.SelectSubset<T, InventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Inventory.
   * @param {InventoryCreateArgs} args - Arguments to create a Inventory.
   * @example
   * // Create one Inventory
   * const Inventory = await prisma.inventory.create({
   *   data: {
   *     // ... data to create a Inventory
   *   }
   * })
   * 
   */
  create<T extends InventoryCreateArgs>(args: Prisma.SelectSubset<T, InventoryCreateArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Inventories.
   * @param {InventoryCreateManyArgs} args - Arguments to create many Inventories.
   * @example
   * // Create many Inventories
   * const inventory = await prisma.inventory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InventoryCreateManyArgs>(args?: Prisma.SelectSubset<T, InventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Inventories and returns the data saved in the database.
   * @param {InventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
   * @example
   * // Create many Inventories
   * const inventory = await prisma.inventory.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Inventories and only return the `id`
   * const inventoryWithIdOnly = await prisma.inventory.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InventoryCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Inventory.
   * @param {InventoryDeleteArgs} args - Arguments to delete one Inventory.
   * @example
   * // Delete one Inventory
   * const Inventory = await prisma.inventory.delete({
   *   where: {
   *     // ... filter to delete one Inventory
   *   }
   * })
   * 
   */
  delete<T extends InventoryDeleteArgs>(args: Prisma.SelectSubset<T, InventoryDeleteArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Inventory.
   * @param {InventoryUpdateArgs} args - Arguments to update one Inventory.
   * @example
   * // Update one Inventory
   * const inventory = await prisma.inventory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InventoryUpdateArgs>(args: Prisma.SelectSubset<T, InventoryUpdateArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Inventories.
   * @param {InventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
   * @example
   * // Delete a few Inventories
   * const { count } = await prisma.inventory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InventoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, InventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Inventories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Inventories
   * const inventory = await prisma.inventory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InventoryUpdateManyArgs>(args: Prisma.SelectSubset<T, InventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Inventories and returns the data updated in the database.
   * @param {InventoryUpdateManyAndReturnArgs} args - Arguments to update many Inventories.
   * @example
   * // Update many Inventories
   * const inventory = await prisma.inventory.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Inventories and only return the `id`
   * const inventoryWithIdOnly = await prisma.inventory.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InventoryUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Inventory.
   * @param {InventoryUpsertArgs} args - Arguments to update or create a Inventory.
   * @example
   * // Update or create a Inventory
   * const inventory = await prisma.inventory.upsert({
   *   create: {
   *     // ... data to create a Inventory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Inventory we want to update
   *   }
   * })
   */
  upsert<T extends InventoryUpsertArgs>(args: Prisma.SelectSubset<T, InventoryUpsertArgs<ExtArgs>>): Prisma.Prisma__InventoryClient<runtime.Types.Result.GetResult<Prisma.$InventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Inventories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryCountArgs} args - Arguments to filter Inventories to count.
   * @example
   * // Count the number of Inventories
   * const count = await prisma.inventory.count({
   *   where: {
   *     // ... the filter for the Inventories we want to count
   *   }
   * })
  **/
  count<T extends InventoryCountArgs>(
    args?: Prisma.Subset<T, InventoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InventoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Inventory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InventoryAggregateArgs>(args: Prisma.Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

  /**
   * Group by Inventory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InventoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InventoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InventoryGroupByArgs['orderBy'] }
      : { orderBy?: InventoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Inventory model
 */
readonly fields: InventoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Inventory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InventoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  category<T extends Prisma.CategoryDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.CategoryDefaultArgs<ExtArgs>>): Prisma.Prisma__CategoryClient<runtime.Types.Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Inventory model
 */
export interface InventoryFieldRefs {
  readonly id: Prisma.FieldRef<"Inventory", 'String'>
  readonly userId: Prisma.FieldRef<"Inventory", 'String'>
  readonly categoryId: Prisma.FieldRef<"Inventory", 'String'>
  readonly name: Prisma.FieldRef<"Inventory", 'String'>
  readonly sku: Prisma.FieldRef<"Inventory", 'String'>
  readonly description: Prisma.FieldRef<"Inventory", 'String'>
  readonly unit: Prisma.FieldRef<"Inventory", 'String'>
  readonly quantity: Prisma.FieldRef<"Inventory", 'Int'>
  readonly reorderLevel: Prisma.FieldRef<"Inventory", 'Int'>
  readonly costPrice: Prisma.FieldRef<"Inventory", 'Float'>
  readonly supplier: Prisma.FieldRef<"Inventory", 'String'>
  readonly status: Prisma.FieldRef<"Inventory", 'InventoryStatus'>
  readonly createdAt: Prisma.FieldRef<"Inventory", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Inventory", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Inventory findUnique
 */
export type InventoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * Filter, which Inventory to fetch.
   */
  where: Prisma.InventoryWhereUniqueInput
}

/**
 * Inventory findUniqueOrThrow
 */
export type InventoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * Filter, which Inventory to fetch.
   */
  where: Prisma.InventoryWhereUniqueInput
}

/**
 * Inventory findFirst
 */
export type InventoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * Filter, which Inventory to fetch.
   */
  where?: Prisma.InventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Inventories to fetch.
   */
  orderBy?: Prisma.InventoryOrderByWithRelationInput | Prisma.InventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Inventories.
   */
  cursor?: Prisma.InventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Inventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Inventories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Inventories.
   */
  distinct?: Prisma.InventoryScalarFieldEnum | Prisma.InventoryScalarFieldEnum[]
}

/**
 * Inventory findFirstOrThrow
 */
export type InventoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * Filter, which Inventory to fetch.
   */
  where?: Prisma.InventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Inventories to fetch.
   */
  orderBy?: Prisma.InventoryOrderByWithRelationInput | Prisma.InventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Inventories.
   */
  cursor?: Prisma.InventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Inventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Inventories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Inventories.
   */
  distinct?: Prisma.InventoryScalarFieldEnum | Prisma.InventoryScalarFieldEnum[]
}

/**
 * Inventory findMany
 */
export type InventoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * Filter, which Inventories to fetch.
   */
  where?: Prisma.InventoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Inventories to fetch.
   */
  orderBy?: Prisma.InventoryOrderByWithRelationInput | Prisma.InventoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Inventories.
   */
  cursor?: Prisma.InventoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Inventories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Inventories.
   */
  skip?: number
  distinct?: Prisma.InventoryScalarFieldEnum | Prisma.InventoryScalarFieldEnum[]
}

/**
 * Inventory create
 */
export type InventoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * The data needed to create a Inventory.
   */
  data: Prisma.XOR<Prisma.InventoryCreateInput, Prisma.InventoryUncheckedCreateInput>
}

/**
 * Inventory createMany
 */
export type InventoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Inventories.
   */
  data: Prisma.InventoryCreateManyInput | Prisma.InventoryCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Inventory createManyAndReturn
 */
export type InventoryCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * The data used to create many Inventories.
   */
  data: Prisma.InventoryCreateManyInput | Prisma.InventoryCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Inventory update
 */
export type InventoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * The data needed to update a Inventory.
   */
  data: Prisma.XOR<Prisma.InventoryUpdateInput, Prisma.InventoryUncheckedUpdateInput>
  /**
   * Choose, which Inventory to update.
   */
  where: Prisma.InventoryWhereUniqueInput
}

/**
 * Inventory updateMany
 */
export type InventoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Inventories.
   */
  data: Prisma.XOR<Prisma.InventoryUpdateManyMutationInput, Prisma.InventoryUncheckedUpdateManyInput>
  /**
   * Filter which Inventories to update
   */
  where?: Prisma.InventoryWhereInput
  /**
   * Limit how many Inventories to update.
   */
  limit?: number
}

/**
 * Inventory updateManyAndReturn
 */
export type InventoryUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * The data used to update Inventories.
   */
  data: Prisma.XOR<Prisma.InventoryUpdateManyMutationInput, Prisma.InventoryUncheckedUpdateManyInput>
  /**
   * Filter which Inventories to update
   */
  where?: Prisma.InventoryWhereInput
  /**
   * Limit how many Inventories to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Inventory upsert
 */
export type InventoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * The filter to search for the Inventory to update in case it exists.
   */
  where: Prisma.InventoryWhereUniqueInput
  /**
   * In case the Inventory found by the `where` argument doesn't exist, create a new Inventory with this data.
   */
  create: Prisma.XOR<Prisma.InventoryCreateInput, Prisma.InventoryUncheckedCreateInput>
  /**
   * In case the Inventory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InventoryUpdateInput, Prisma.InventoryUncheckedUpdateInput>
}

/**
 * Inventory delete
 */
export type InventoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
  /**
   * Filter which Inventory to delete.
   */
  where: Prisma.InventoryWhereUniqueInput
}

/**
 * Inventory deleteMany
 */
export type InventoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Inventories to delete
   */
  where?: Prisma.InventoryWhereInput
  /**
   * Limit how many Inventories to delete.
   */
  limit?: number
}

/**
 * Inventory without action
 */
export type InventoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Inventory
   */
  select?: Prisma.InventorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Inventory
   */
  omit?: Prisma.InventoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InventoryInclude<ExtArgs> | null
}
